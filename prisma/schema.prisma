// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   // 'STAFF', 'MANAGER', 'HR', 'ADMIN'
  password  String
  payRate   Float    @default(0.0)
  payRateEffectiveDate DateTime? // When the current pay rate became effective
  managerId String?
  settings  String   @default("{}")
  status    String   @default("ACTIVE") // 'ACTIVE', 'SUSPENDED', 'INACTIVE'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manager           User?         @relation("UserManager", fields: [managerId], references: [id])
  directReports     User[]        @relation("UserManager")
  timesheets        Timesheet[]

  timesheetMessages TimesheetMessage[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  customReports     CustomReport[]
  payRateHistory    PayRateHistory[]
  emailConfigurations EmailConfiguration[]
  notificationSettings NotificationSettings[]
  timesheetTemplates TimesheetTemplate[]
}

model PayRateHistory {
  id           String   @id @default(cuid())
  userId       String
  payRate      Float
  effectiveDate DateTime
  endDate      DateTime? // When this rate ended (null for current rate)
  createdBy    String   // Who made the change
  reason       String?  // Reason for the change
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Timesheet {
  id           String   @id @default(cuid())
  userId       String
  periodStart  DateTime
  periodEnd    DateTime
  state        String   @default("PENDING_STAFF") // 'PENDING_STAFF', 'PENDING_MANAGER', 'PENDING_HR', 'APPROVED'
  staffSig     String?
  staffSigAt   DateTime?
  managerSig   String?
  managerSigAt DateTime?
  hrSig        String?
  hrSigAt      DateTime?
  managerNote  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries  TimesheetEntry[]
  messages TimesheetMessage[]

  @@unique([userId, periodStart, periodEnd])
}

model TimesheetEntry {
  id          String    @id @default(cuid())
  timesheetId String
  date        DateTime
  in1         DateTime?
  out1        DateTime?
  in2         DateTime?
  out2        DateTime?
  in3         DateTime?
  out3        DateTime?
  plawaHours  Float     @default(0.0)
  comments    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  timesheet Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)

  @@unique([timesheetId, date])
}

model TimesheetMessage {
  id          String   @id @default(cuid())
  timesheetId String
  senderId    String
  content     String
  createdAt   DateTime @default(now())

  // Relations
  timesheet Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  sender    User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    String?  // JSON string
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  title      String
  message    String
  isRead     Boolean  @default(false)
  resourceId String?
  createdAt  DateTime @default(now())
  readAt     DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomReport {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   String
  config      String   // JSON string containing report configuration
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model EmailConfiguration {
  id                String   @id @default(cuid())
  smtpHost          String
  smtpPort          Int
  smtpSecure        Boolean  @default(true)
  smtpUser          String
  smtpPassword      String   // Encrypted
  fromEmail         String
  fromName          String
  isEnabled         Boolean  @default(false)
  testEmailSent     Boolean  @default(false)
  lastTestAt        DateTime?
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id                        String   @id @default(cuid())
  timesheetSubmissionEnabled Boolean  @default(true)
  timesheetApprovalEnabled   Boolean  @default(true)
  timesheetDenialEnabled     Boolean  @default(true)
  timesheetFinalApprovalEnabled Boolean @default(true)
  timesheetMessageEnabled    Boolean  @default(true)
  userAccountEnabled         Boolean  @default(true)
  reportDeliveryEnabled      Boolean  @default(true)
  systemAlertsEnabled        Boolean  @default(true)
  createdBy                 String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model TimesheetTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  patterns TimesheetTemplatePattern[]

  @@unique([userId, name])
}

model TimesheetTemplatePattern {
  id         String   @id @default(cuid())
  templateId String
  dayType    String   // 'WEEKDAY', 'SATURDAY', 'SUNDAY'
  in1        String?  // Time in HH:MM format
  out1       String?
  in2        String?
  out2       String?
  in3        String?
  out3       String?
  comments   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  template TimesheetTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, dayType])
}
