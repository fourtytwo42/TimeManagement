// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   // 'STAFF', 'MANAGER', 'HR', 'ADMIN'
  password  String
  payRate   Float    @default(0.0)
  managerId String?
  settings  String   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manager           User?         @relation("UserManager", fields: [managerId], references: [id])
  directReports     User[]        @relation("UserManager")
  timesheets        Timesheet[]
  sentMessages      Message[]     @relation("MessageSender")
  receivedMessages  Message[]     @relation("MessageReceiver")
  timesheetMessages TimesheetMessage[]
  auditLogs         AuditLog[]
}

model Timesheet {
  id           String   @id @default(cuid())
  userId       String
  periodStart  DateTime
  periodEnd    DateTime
  state        String   @default("PENDING_STAFF") // 'PENDING_STAFF', 'PENDING_MANAGER', 'PENDING_HR', 'APPROVED'
  staffSig     String?
  staffSigAt   DateTime?
  managerSig   String?
  managerSigAt DateTime?
  hrSig        String?
  hrSigAt      DateTime?
  managerNote  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries  TimesheetEntry[]
  messages TimesheetMessage[]

  @@unique([userId, periodStart, periodEnd])
}

model TimesheetEntry {
  id          String    @id @default(cuid())
  timesheetId String
  date        DateTime
  in1         DateTime?
  out1        DateTime?
  in2         DateTime?
  out2        DateTime?
  in3         DateTime?
  out3        DateTime?
  plawaHours  Float     @default(0.0)
  comments    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  timesheet Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)

  @@unique([timesheetId, date])
}

model Message {
  id         String    @id @default(cuid())
  senderId   String
  receiverId String
  subject    String
  content    String
  isRead     Boolean   @default(false)
  readAt     DateTime?
  createdAt  DateTime  @default(now())

  // Relations
  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model TimesheetMessage {
  id          String   @id @default(cuid())
  timesheetId String
  senderId    String
  content     String
  createdAt   DateTime @default(now())

  // Relations
  timesheet Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  sender    User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    String?  // JSON string
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
